{"name":"Pipe.js","tagline":"Micro (< 500 bytes) helper library for queuing async tasks","body":"# Pipe.js\r\n  \r\nPipe.js is an async task queuing helper library with following great features:\r\n\r\n* Small size micro library (<500b)\r\n* It is written in pure JavaScript\r\n* It doesn't have any dependencies\r\n* It can work with other libraries\r\n* It can run in browser and nodejs\r\n\r\nIt is similar to [queue.js](mbostock/queue) but built with a different \r\nphilosophy in mind. \r\n* In `queue.js` you fill up a queue with tasks and \\*then\\* await for them to \r\n  complete one by one or together. By design, this only allows awaiting for \r\n  tasks which are already added \\[1\\], but not for tasks which are dynamically \r\n  added later. \r\n* With `Pipe.js`, you *fill* a pipe from one end with tasks that \r\n  asynchronously supply some results and *fetch* the results from the other \r\n  end as they become available. The *fetch* requests are deferred if there are \r\n  no tasks in the pipe, just like execution of tasks is deferred if there are \r\n  no fetch requests. The pipe ensures that the order of tasks match with order \r\n  of fetch requests (i.e. result of first added task is served to first fetch \r\n  request, second to second, and so on). This allows dynamically adding tasks \r\n  to the pipe while being assured about their execution order.\r\n\r\n  %%TODO: Illustration Image%%\r\n\r\n\r\n### USAGE\r\n\r\n  %% TODO: @include extract_comments('pipe.js') %%\r\n\r\n\r\n### EXAMPLE\r\n\r\n##### Basic example:\r\n\r\n  ```javascript\r\n  var task_add = function(argx, argy, done) { \r\n    setTimeout(function() {\r\n      console.log('add complete!', argx, argy); \r\n      done(null, argx + argy);\r\n    }, 5000);\r\n  }\r\n  var task_sub = function(argx, argy, done) { \r\n    setTimeout(function() {\r\n      console.log('sub complete!', argx, argy); \r\n      done(null, argx - argy);\r\n    }, 1000);\r\n  }\r\n\r\n  var pipe = new Pipe();\r\n  pipe\r\n    .fill(task_add, 10, 15)\r\n    .fill(task_sub, 40, 20)\r\n    .fetch(function(err, result) { \r\n      console.log('result', result); // -> (null, 25) \r\n    })\r\n    .fetch(function(err, result) { \r\n      console.log('result', result); // -> (null, 20) \r\n    });\r\n  ```\r\n\r\n##### Practical example:\r\n\r\n  ```javascript\r\n  var get_resource = function(url, done) { \r\n    fetch(url, function(err, result) {\r\n      done(err, result);\r\n    });\r\n  }\r\n\r\n  pipe\r\n    .fill(get_resource, '1.json')\r\n    .fill(get_resource, '2.json')\r\n    .flush(function(err, result) { \r\n      if (err) {\r\n        console.error(err);\r\n        return;\r\n      }\r\n      console.log('result', result); // -> {contents of *.json}\r\n    });\r\n  ```\r\n","google":"UA-29295279-3","note":"Don't delete this file! It's used internally to help with page regeneration."}